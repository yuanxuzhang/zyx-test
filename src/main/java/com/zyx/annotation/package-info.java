/**
 * 
 * Annotation
 * 注解是那些插入到源代码中使用其他工具可以对其进行处理的标签。这些工具可以在原代码层次上进行操作，或者可以在处理编译器在其中放置了注解的类文件。
 * 注解不会改变程序的编译方式。java编译器对包含注解和不包含注解的代码会生成相同的虚拟机指令。
 * 为了能够受益于注解，需要选择一个处理工具，然后向处理工具可以理解的代码中插入注解，之后用该工具处理代码。
 * 应用场景：
 * 1）附属文件的自动生成，例如部署描述符或者bean信息类。
 * 2）测试、日志、事务语义等代码的自动生成。
 * 在Java中，注解是当做一个修饰符来使用的，它被置
 * 于注解项之前，中间没有分号。
 * 注解本身并不会做任何事情，他需要工具支持才会有用。工具去找可处理的注解，做相关的事情。
 * 
 * 语法
 * 注解通过注解接口定义。@interface
 * 注解元素声明：type elementName（）或 type elementName() default value
 * 使用：@AnnotationName(elementName1=value1,element2=value2,...),元素的顺序无关紧要。
 * 如果某个元素的值并未定义，那么就使用声明的默认值
 * PS:默认值并不是和注解存储在一起的；相反的，它们是动态计算而来的，重新修改注解定义默认值，那些在默认值修改之前就已经编译过的类文件也会使用新的
 * 默认值。
 * 快捷方式
 * 1）如果没有指定元素，要么是因为注解中没有任何元素，要么是因为所有元素都使用默认值，这种情况不需要使用圆括号。---标记注解。
 * 2）单值注解，一个元素具有特殊的名字value，并且没有指定其他的元素，那么可以忽略这个元素名以及等号。
 * 注解元素基本类型：
 * 1）基本类型（int、short、long、byte、char、double、float或者boolean）
 * 2）String
 * 3）Class
 * 4）enum
 * 5）注解类型
 * 6）由前面所描述类型组成的数组
 * 可注解的位置：
 * 包，源码级别
 * 类（包括enum）
 * 接口（包括注解接口）
 * 方法
 * 构造器
 * 实例域（包含enum常量）
 * 局部参数，只能在源码级别上（类文件并不描述局部变量，局部变量注解在编译完一个类的时候就会被遗弃掉）
 * 参数变量
 * 一个项可以具有多个注解，它们属于不同的类型即可。
 * 
 * 标准注解：（包含四个元注解）
 * 编译注解：
 * Deprecated 不再鼓励使用的项  
 * SuppressWarnings（告知编译器阻止特殊类型的警告信息）
 * Override 覆盖检测
 * Generated 自动生成代码
 * 管理资源的注解
 * PostConstruct/PreDestory 控制对象生命周期的环境中
 * Resource 资源注解
 * 元注解：
 * Target 限制注解可应用到的项
 * Retention 指定一条注解应该保留对多长时间
 * Documented
 * Method
 * 
 * 
 */
package com.zyx.annotation;